# Schedule definitions for thorn MagScalarEvolve

# Schedule MagScalar evolution if evolution_method=MagScalarEvolve
if (CCTK_EQUALS (evolution_method, "MagScalarEvolve")) {

  STORAGE: rhs_Ei rhs_Ai rhs_Aphi rhs_Zeta rhs_phi rhs_Kphi
  STORAGE: hmetric conf_fac_chi trk

  schedule MagScalar_InitSymBound at BASEGRID
  {
    LANG: Fortran
    OPTIONS: META
  } "Schedule symmetries"

  schedule MagScalar_zero_rhs at BASEGRID after MagScalar_InitSymBound
  {
    LANG: Fortran
  } "set all rhs functions to zero to prevent spurious nans"

  schedule MagScalar_RegisterVars in MoL_Register
  {
    LANG: C
    OPTIONS: META
  } "Register variables for MoL"

  schedule MagScalar_calc_rhs in MoL_CalcRHS as MagScalar_CalcRHS
  {
    LANG: Fortran
  } "MoL RHS calculation for MagScalar variables"

  schedule MagScalar_calc_rhs_bdry in MoL_CalcRHS as MagScalar_CalcRHS_Bdry after MagScalar_CalcRHS
  {
    LANG: Fortran
  } "MoL boundary RHS calculation for MagScalar variables"

  schedule MagScalar_Boundaries in MoL_PostStep
  {
    LANG: Fortran
    OPTIONS: LEVEL
    SYNC: ProcaBase::Ei
    SYNC: ProcaBase::Ai
    SYNC: ProcaBase::Aphi
    SYNC: ProcaBase::Zeta
    SYNC: ScalarBase::phi
    SYNC: ScalarBase::Kphi
  } "MoL boundary enforcement for MagScalar variables"

  schedule GROUP ApplyBCs as MagScalar_ApplyBCs in MoL_PostStep after MagScalar_Boundaries
  {
  } "Apply boundary conditions"


  schedule MagScalar_calc_Tmunu in AddToTmunu as MagScalar_AddToTmunu
  {
    LANG: Fortran
  } "Compute the energy-momentum tensor"

}
